% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vim_perm_sim_wrapper.R
\name{vim_perm_sim_wrapper}
\alias{vim_perm_sim_wrapper}
\title{Preselect the most promising covariates and discover the significant ones in
the final step}
\usage{
vim_perm_sim_wrapper(
  alphas = c(0.3, 0.1, 0.05),
  nsims = c(30, 120, 1500),
  entire_data,
  outcome_var,
  num.threads = NULL,
  num_cores_parallel = NULL,
  save_vimp_history = c("all", "last", "none"),
  to_show = c("FWER", "FDR", "unadjusted"),
  method = c("pooled", "per_variable"),
  ...
)
}
\arguments{
\item{alphas}{Numeric vector, significance level values for each step of the
procedure, default \code{c(0.3, 0.10, 0.05)}.}

\item{nsims}{Numeric vector, number of permutations to be performed in each
step of the procedure, default \code{c(30, 120, 1500)}.}

\item{entire_data}{Input data frame.}

\item{outcome_var}{Character, name of the column containing the outcome
variable.}

\item{num.threads}{Numeric, number of threads. Argument passed to
\code{\link[ranger:ranger]{ranger::ranger()}}, default is \code{NULL}.}

\item{num_cores_parallel}{Numeric greater than 0 and and less than or equal
to the number of cores available on your computer (check by running
\code{\link[parallel:detectCores]{parallel::detectCores()}}). This parameter specifies the number of cores to
use to create a cluster when calling
\code{parallel::makeCluster(num_cores_parallel)}. For example, setting
\code{num_cores_parallel} to 4 will use 4 cores to create a cluster. The default
is \code{NULL}, which means that sequential computation is used.}

\item{save_vimp_history}{Character, one of \code{"all"}, \code{"last"} or \code{"none"}.
\itemize{
\item \code{"all"} (the default) - variable importances from the simulation of all
steps are saved.
\item \code{"last"} - only the variable importances from the simulation of the last
step will be saved.
\item \code{"none"} - no variable importances are saved from the simulation results.
}}

\item{to_show}{Character, one of \code{"FWER"}, \code{"FDR"} or \code{"unadjusted"}.
\itemize{
\item \code{"FWER"} (the default) - the output of \code{add_test_results()} includes
unadjusted, Benjamini-Hochberg (FDR) and Holm (FWER) adjusted p-values
together with the decision whether the variable is significant or not (1 -
significant, 0 - not significant) according to the chosen criterium.
\item \code{"FDR"} - the output includes both unadjusted and FDR adjusted p-values along
with the decision.
\item \verb{"unadjusted:} - the output contains only raw, unadjusted p-values together
with the decision.
}}

\item{method}{Character, one of \code{"pooled"} or \code{"per_variable"}.
\itemize{
\item \code{"pooled"} (the default) - the output shows pooled p-values and decisions
based on them.
\item \code{"per_variable"} - the output shows per variable p-values and decisions
based on them.
}}

\item{...}{Additional parameters passed to \code{\link[ranger:ranger]{ranger::ranger()}}.}
}
\value{
List with the following entries:
\itemize{
\item \code{vimp_history}- if \code{save_vimp_history} is set to \code{"all"} or \code{"last"} then
it is a data frame with simulated VIMPs of covariates and their shadows from
the last step of the procedure. If \code{save_vimp_history} is set to \code{"none"},
then it is \code{NULL}.
\item \code{final_dec_pooled} (the default) or \code{final_dec_per_variable} - a data
frame containing, depending on the specified value of the \code{to_show}
parameter, p-values and corresponding decisions regarding variable
informativeness from the last step of the procedure.
\item \code{alpha} - numeric, significance level used in last step.
\item \code{result_taken_from_previous_step} - a boolean indicating whether the
reported results are actually the results obtained in the last step. If
\code{TRUE}, then no variables survived the preselection process, so the
reported results are taken from one of the previous steps.
\item \code{time_elapsed} - list containing the runtime of each step and the total
time taken to execute the code.
\item \code{pre_selection} -  list in which the results of the pre-selection are
stored. The exact form of this element depends on the chosen value of the
\code{save_vimp_history} parameter.
\item \code{call} - the call formula used to generate the output.
}
}
\description{
\code{vim_perm_sim_wrapper()} does the preselection of variables first. This
allows non-informative covariates to be excluded from subsequent steps, thus
reducing runtime. Then, in the final step with the lowest alpha level, the
significant variables are confirmed in the same way as in the pre-selection
phase.
}
\examples{
data(mtcars)

# When working with real data, use higher values for the nsims and num.trees
# parameters --> here these parameters are set to small values to reduce the
# runtime.

# Standard use - sequential computing
out1 <- vim_perm_sim_wrapper(
  entire_data = mtcars, outcome_var = "vs",
  nsims = c(10, 20, 30), num.trees = 30
)

# Parallelisation provided by ranger::ranger() function --> increase the
# value of the num.threads parameter to speed up the computation
\donttest{
out2 <- vim_perm_sim_wrapper(
  entire_data = mtcars, outcome_var = "vs",
  nsims = c(10, 20, 30), num.threads = 2, num.trees = 30
)

# Parallel computing using a cluster
out3 <- vim_perm_sim_wrapper(
  entire_data = mtcars, outcome_var = "vs",
  nsims = c(10, 20, 30), num_cores_parallel = 2, num.trees = 30
)

# Save the simulated variable importance values for the last step only
out4 <- vim_perm_sim_wrapper(
  entire_data = mtcars, outcome_var = "vs",
  nsims = c(10, 20, 30), save_vimp_history = "last", num.trees = 30
)

# Print unadjusted and FDR-adjusted p-values together with the corresponding
# decisions
out5 <- vim_perm_sim_wrapper(
  entire_data = mtcars, outcome_var = "vs",
  nsims = c(10, 20, 30), to_show = "FDR", num.trees = 30
)

# Use per variable p-values to decide in the final step whether a covariate
# is informative or not
out6 <- vim_perm_sim_wrapper(
  entire_data = mtcars, outcome_var = "vs",
  nsims = c(10, 20, 30), method = "per_variable", num.trees = 30
)
}
}
