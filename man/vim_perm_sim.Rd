% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/vim_perm_sim.R
\name{vim_perm_sim}
\alias{vim_perm_sim}
\title{Compute the variable importance of the predictors and their row-wise shadows}
\usage{
vim_perm_sim(
  entire_data,
  outcome_var,
  nsim = 100,
  importance = "permutation",
  num.threads = NULL,
  num.trees = max(2 * (ncol(entire_data) - 1), 10000),
  data_name = NULL,
  num_cores_parallel = NULL,
  ...
)
}
\arguments{
\item{entire_data}{Input data frame.}

\item{outcome_var}{Character, name of the column containing the outcome
variable.}

\item{nsim}{Numeric, number of permutations of the initial predictor values,
default is 100.}

\item{importance}{Character, the type of variable importance to be calculated
for each independent variable. Argument passed to \code{\link[ranger:ranger]{ranger::ranger()}},
default is \code{permutation}.}

\item{num.threads}{Numeric, number of threads. Argument passed to
\code{\link[ranger:ranger]{ranger::ranger()}}, default is \code{NULL}.}

\item{num.trees}{Numeric, number of trees. Passed to \code{\link[ranger:ranger]{ranger::ranger()}},
default is \code{max(2 * (ncol(entire_data) - 1), 10000)}.}

\item{data_name}{Character, name of the object passed as \code{entire_data}. In
\code{vim_perm_sim_wrapper()} it is set automatically.}

\item{num_cores_parallel}{Numeric greater than 0 and and less than or equal
to the number of cores available on your computer (check by running
\code{\link[parallel:detectCores]{parallel::detectCores()}}). This parameter specifies the number of cores to
use to create a cluster when calling
\code{parallel::makeCluster(num_cores_parallel)}. For example, setting
\code{num_cores_parallel} to 4 will use 4 cores to create a cluster. The default
is \code{NULL}, which means that sequential computation is used.}

\item{...}{Additional parameters passed to \code{\link[ranger:ranger]{ranger::ranger()}}.}
}
\value{
List consisting of \code{vim_simulated} - a data frame with \code{n_sim}
variable importances calculated based on the original and row-wise permuted
values of the predictors.
}
\description{
\code{vim_perm_sim()} calculates repeatedly (\code{nsim} times) the variable importance
of the original values of the predictors and their row-wise permuted shadows.
Each shadow's variable importance is computed based on a new permutation of
the initial predictor values.
}
\examples{
data(mtcars)
# When working with real data, increase num.trees value or leave default
# Here this parameter is set to a small value in order to reduce the runtime

# Sequential computing mode:
out_seq <- vim_perm_sim(
  entire_data = mtcars, outcome_var = "vs", nsim = 30,
  num.trees = 50
)

# Function to make sure proper number of cores is specified in parallel
# computing
safe_num_threads <- function(n) {
  available <- parallel::detectCores()
  if (n > available) available else n
}

# Parallel computing - using a cluster:
\donttest{
out_par_cores <- vim_perm_sim(
  entire_data = mtcars, outcome_var = "vs",
  nsim = 30, num_cores_parallel = safe_num_threads(2), num.trees = 50
)
}

# Parallelism through num.threads parameter from ranger::ranger()
out_par <- vim_perm_sim(
  entire_data = mtcars, outcome_var = "vs", nsim = 30,
  num.threads = safe_num_threads(2), num.trees = 50
)
}
