x = c(1, 1, 1),
y = c(1, 1, 1),
radius = c(0.7, 1.1, 1.5),
group = c("FWER", "FDR", "Type-1")
) %>%
mutate(group = factor(group, levels = c( "Type-1", "FDR", "FWER")))
ggplot(data_fr, aes(x0 = x, y0 = y, r = radius, fill = group)) +
geom_circle(
alpha = 0.9,
color = "black",
show.legend = F) +
coord_fixed()
# Create the plot
helper_plot <- ggplot(data_fr, aes(x0 = x, y0 = y, r = radius, fill = group)) +
geom_circle(
alpha = 0.9,
color = "black",
show.legend = F) +
coord_fixed() +
theme_void() +
scale_fill_manual(values = c("Type-1" = "#43B284FF",
"FWER" = "#DD5129FF",
"FDR" = "#0F7BA2FF")) +
geom_text(label = data_fr$group,
aes(x = x,
y = 0.8*y+radius,
fontface = "bold"),
size = 4
) +
theme(plot.margin = margin(t = 0,  # Top margin
r = 0,  # Right margin
b = 0,  # Bottom margin
l = 0) # Left margin
)
helper_plot
devtools::load_all()
devtools::load_all()
devtools::check()
data.frame(
x = c(1, 1, 1),
y = c(1, 1, 1),
radius = c(0.7, 1.1, 1.5),
group = c("FWER", "FDR", "Type-1")
)
data.frame(
x = c(1, 1, 1),
y = c(1, 1, 1),
radius = c(0.7, 1.1, 1.5),
group = c("FWER", "FDR", "Type-1")
) %>%
mutate(group = factor(.data[[group]], levels = c( "Type-1", "FDR", "FWER")))
data_fr <- data.frame(
x = c(1, 1, 1),
y = c(1, 1, 1),
radius = c(0.7, 1.1, 1.5),
group = c("FWER", "FDR", "Type-1")
) %>%
mutate(group = factor(group, levels = c( "Type-1", "FDR", "FWER")))
# Create the plot
helper_plot <- ggplot(data_fr, aes(x0 = x, y0 = y, r = radius, fill = group)) +
geom_circle(
alpha = 0.9,
color = "black",
show.legend = F) +
coord_fixed() +
theme_void() +
scale_fill_manual(values = c("Type-1" = "#43B284FF",
"FWER" = "#DD5129FF",
"FDR" = "#0F7BA2FF")) +
geom_text(label = data_fr %>% select("group"),
aes(x = .data[[x]],
y = 0.8*.data[[y]]+.data[[radius]],
fontface = "bold"),
size = 4
) +
theme(plot.margin = margin(t = 0,  # Top margin
r = 0,  # Right margin
b = 0,  # Bottom margin
l = 0) # Left margin
)
.helper_plot <- function(){
data_fr <- data.frame(
x = c(1, 1, 1),
y = c(1, 1, 1),
radius = c(0.7, 1.1, 1.5),
group = c("FWER", "FDR", "Type-1")
) %>%
mutate(group = factor(group, levels = c( "Type-1", "FDR", "FWER")))
# Create the plot
helper_plot <- ggplot(data_fr, aes(x0 = x, y0 = y, r = radius, fill = group)) +
geom_circle(
alpha = 0.9,
color = "black",
show.legend = F) +
coord_fixed() +
theme_void() +
scale_fill_manual(values = c("Type-1" = "#43B284FF",
"FWER" = "#DD5129FF",
"FDR" = "#0F7BA2FF")) +
geom_text(label = data_fr %>% select("group"),
aes(x = .data[[x]],
y = 0.8*.data[[y]]+.data[[radius]],
fontface = "bold"),
size = 4
) +
theme(plot.margin = margin(t = 0,  # Top margin
r = 0,  # Right margin
b = 0,  # Bottom margin
l = 0) # Left margin
)
helper_plot
}
.helper_plot()
data_fr <- data.frame(
x = c(1, 1, 1),
y = c(1, 1, 1),
radius = c(0.7, 1.1, 1.5),
group = c("FWER", "FDR", "Type-1")
) %>%
mutate(group = factor(group, levels = c( "Type-1", "FDR", "FWER")))
# Create the plot
helper_plot <- ggplot(data_fr, aes(x0 = x, y0 = y, r = radius, fill = group)) +
geom_circle(
alpha = 0.9,
color = "black",
show.legend = F) +
coord_fixed() +
theme_void() +
scale_fill_manual(values = c("Type-1" = "#43B284FF",
"FWER" = "#DD5129FF",
"FDR" = "#0F7BA2FF")) +
geom_text(aes(x = x,
y = 0.8*y+radius,
label = group,
fontface = "bold"),
size = 4
) +
theme(plot.margin = margin(t = 0,  # Top margin
r = 0,  # Right margin
b = 0,  # Bottom margin
l = 0) # Left margin
)
helper_plot
devtools::load_all()
devtools::check(manual = FALSE, vignettes = FALSE)
.helper_plot <- function(){
data_fr <- data.frame(
x = c(1, 1, 1),
y = c(1, 1, 1),
radius = c(0.7, 1.1, 1.5),
group = c("FWER", "FDR", "Type-1")
) %>%
mutate(group = factor(group, levels = c( "Type-1", "FDR", "FWER")))
# Create the plot
helper_plot <- ggplot(data_fr, aes(x0 = {{ x }}, y0 = {{ y }}, r = {{ radius }}, fill = {{ group }})) +
geom_circle(
alpha = 0.9,
color = "black",
show.legend = F) +
coord_fixed() +
theme_void() +
scale_fill_manual(values = c("Type-1" = "#43B284FF",
"FWER" = "#DD5129FF",
"FDR" = "#0F7BA2FF")) +
geom_text(aes(x = {{ x }},
y = 0.8*{{ y }}+{{ radius }},
label ={{ group }},
fontface = "bold"),
size = 4
) +
theme(plot.margin = margin(t = 0,  # Top margin
r = 0,  # Right margin
b = 0,  # Bottom margin
l = 0) # Left margin
)
helper_plot
}
.helper_plot()
factor(( "Type-1", "FDR", "FWER"))
factor( "Type-1", "FDR", "FWER")
c("Type-1", "FDR", "FWER") %>% as.factor()
c("Type-1", "FDR", "FWER") %>% as.factor(levels = c( "Type-1", "FDR", "FWER"))
factor(c("Type-1", "FDR", "FWER"))
devtools::load_all()
devtools::check(manual = FALSE, vignettes = FALSE)
devtools::load_all()
devtools::check(manual = FALSE, vignettes = FALSE)
devtools::load_all()
devtools::check(manual = FALSE, vignettes = FALSE)
devtools::load_all()
.helper_plot()
.helper_plot <- function(){
data_fr <- data.frame(
x_coord = c(1, 1, 1),
y_coord = c(1, 1, 1),
radius = c(1.5, 1.1, 0.7),
group = c( "Type-1", "FDR", "FWER")
) %>%
mutate(group = factor(group, levels = c( "Type-1", "FDR", "FWER")))
# Create the plot
helper_plot <- ggplot(data_fr, aes(x0 = x_coord, y0 = y_coord, r = radius, fill = group)) +
geom_circle(
alpha = 0.9,
color = "black",
show.legend = F) +
coord_fixed() +
theme_void() +
scale_fill_manual(values = c("Type-1" = "#43B284FF",
"FWER" = "#DD5129FF",
"FDR" = "#0F7BA2FF")) +
geom_text(aes(x = x_coord,
y = 0.8*y_coord+radius,
label = group,
fontface = "bold"),
size = 4
)+
theme(plot.margin = margin(t = 0,  # Top margin
r = 0,  # Right margin
b = 0,  # Bottom margin
l = 0) # Left margin
)
helper_plot
}
.helper_plot()
devtools::load_all()
devtools::load_all()
.helper_plot()
devtools::load_all()
devtools::check(manual = FALSE, vignettes = FALSE)
devtools::load_all()
devtools::check(manual = FALSE, vignettes = FALSE)
devtools::load_all()
devtools::check(manual = FALSE, vignettes = FALSE)
check_fun <- function(data, outcome){
out <- entire_data %>%
rename(y = {{ outcome }})
out
}
subset_dat
toy <- data.frame(a = 1:10, diag = 11:20)
check_fun <- function(data, outcome){
out <- entire_data %>%
rename(y = {{ outcome }})
out
}
check_fun(data = toy, outcome = "diag")
check_fun <- function(data, outcome){
out <- data %>%
rename(y = {{ outcome }})
out
}
toy <- data.frame(a = 1:10, diag = 11:20)
toy
check_fun(data = toy, outcome = "diag")
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
nonsense_df <- data.frame(
diagnosis = c(rep(1, 50), rep(0, 50)),
v1 = rep(45, 100), v2 = rep(55, 100), v3 = rep(65, 100)
)
# Capture all warnings
warnings <- capture_warnings(
vim_perm_sim_wrapper(
alphas = c(0.3, 0.10, 0.05), nsims = c(10, 20, 30),
entire_data = nonsense_df, outcome_var = "diagnosis"
)
)
warnings
# Capture all warnings
warnings <- capture_warnings(
vim_perm_sim_wrapper(
alphas = c(0.3, 0.10, 0.05), nsims = c(10, 20, 30),
entire_data = nonsense_df, outcome_var = "diagnosis"
)
)
warnings
# Capture all warnings
warnings <- capture_warnings(
vim_perm_sim_wrapper(
alphas = c(0.3, 0.10, 0.05), nsims = c(10, 20, 30),
entire_data = nonsense_df, outcome_var = "diagnosis"
)
)
# Capture all warnings
warnings <- capture_warnings(
vim_perm_sim_wrapper(
alphas = c(0.3, 0.10, 0.05), nsims = c(10, 20, 30),
entire_data = nonsense_df, outcome_var = "diagnosis"
)
)
# Capture all warnings
warnings <- capture_warnings(
vim_perm_sim_wrapper(
alphas = c(0.3, 0.10, 0.05), nsims = c(10, 20, 30),
entire_data = nonsense_df, outcome_var = "diagnosis"
)
)
warnings
# Capture all warnings
warnings <- capture_warnings(
vim_perm_sim_wrapper(
alphas = c(0.3, 0.10, 0.05), nsims = c(10, 20, 30),
entire_data = nonsense_df, outcome_var = "diagnosis"
)
)
# Capture all warnings
warnings <- capture_warnings(
vim_perm_sim_wrapper(
alphas = c(0.3, 0.10, 0.05), nsims = c(10, 20, 30),
entire_data = nonsense_df, outcome_var = "diagnosis"
)
)
# Capture all warnings
warnings <- capture_warnings(
vim_perm_sim_wrapper(
alphas = c(0.3, 0.10, 0.05), nsims = c(10, 20, 30),
entire_data = nonsense_df, outcome_var = "diagnosis"
)
)
# Capture all warnings
warnings <- capture_warnings(
vim_perm_sim_wrapper(
alphas = c(0.3, 0.10, 0.05), nsims = c(10, 20, 30),
entire_data = nonsense_df, outcome_var = "diagnosis"
)
)
length(warnings)
vim_perm_sim_wrapper(
alphas = c(0.3, 0.10, 0.05), nsims = c(10, 20, 30),
entire_data = nonsense_df, outcome_var = "diagnosis"
)
# Warnings
test_that("vim_perm_sim_wrapper() throws a warning when no wariables survive pre-selection process.", {
nonsense_df <- data.frame(
diagnosis = c(rep(1, 50), rep(0, 50)),
v1 = rep(45, 100), v2 = rep(55, 100), v3 = rep(65, 100)
)
# Capture all warnings
warnings <- capture_warnings(
vim_perm_sim_wrapper(
alphas = c(0.3, 0.10, 0.05), nsims = c(10, 20, 30),
entire_data = nonsense_df, outcome_var = "diagnosis"
)
)
expect_equal(length(warnings)>1, TRUE)
})
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check(manual = FALSE, vignettes = FALSE)
devtools::load_all()
devtools::check(manual = FALSE, vignettes = FALSE)
devtools::load_all()
devtools::check(manual = FALSE, vignettes = FALSE)
# Ad-hoc checks ----
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
data_alz <- cbind(diagnosis, predictors)
subset_dat <- slice_sample(data_alz, n = 50)
vps <- vim_perm_sim(entire_data = subset_dat, outcome_var = "diagnosis", nsim = 30, num.trees = 50)
vps_add <- add_test_results(vimpermsim = vps, alpha = 0.1, init_num_vars = 130, to_show = "FDR")
$test_results$pooled
vps_add$test_results$pooled
vps_add$test_results$pooled %>% head()
devtools::load_all()
devtools::check(manual = FALSE, vignettes = FALSE)
df <- tibble(
x = c(3, 2, 2, 2, 1),
y = c(0, 2, 1, 1, 4),
z1 = c("a", "a", "a", "b", "a"),
z2 = c("c", "d", "d", "a", "c")
)
df
df <- data.frame(
x = c(3, 2, 2, 2, 1),
y = c(0, 2, 1, 1, 4),
z1 = c("a", "a", "a", "b", "a"),
z2 = c("c", "d", "d", "a", "c")
)
df
test_fun <- function(){}
test_fun <- function(data){
data %>% select(pick(x)) %>% print()
}
test_fun(data = df)
test_fun <- function(data){
data %>% select(x) %>% print()
}
test_fun(data = df)
test_fun <- function(data){
data %>% select(all_of(x)) %>% print()
}
test_fun(data = df)
test_fun <- function(data){
data %>% select({{ x }}) %>% print()
}
test_fun(data = df)
test_fun <- function(data){
data %>% select(.data[["x"]]) %>% print()
}
test_fun(data = df)
data %>% select(all_of("x")) %>% print()
test_fun <- function(data){
data %>% select(all_of("x")) %>% print()
}
test_fun(data = df)
test_fun <- function(data){
data %>% select("x") %>% print()
}
test_fun(data = df)
devtools::load_all()
devtools::check(manual = FALSE, vignettes = FALSE)
devtools::load_all()
devtools::check(manual = FALSE, vignettes = FALSE)
devtools::load_all()
devtools::check()
df <- data.frame(
x = c(3, 2, 2, 2, 1),
y = c(0, 2, 1, 1, 4),
z1 = c("a", "a'_permuted", "a'_permuted", "b'_permuted", "a"),
z2 = c("c", "d", "d", "a", "c")
)
test_fun <- function(data){
data %>%  filter(!grepl('_permuted', z1)) %>% print()
}
df
df <- data.frame(
x = c(3, 2, 2, 2, 1),
y = c(0, 2, 1, 1, 4),
z1 = c("a", "a_permuted", "a_permuted", "b_permuted", "a"),
z2 = c("c", "d", "d", "a", "c")
)
df
test_fun(data = df)
n_distinct()
?n_distinct
df %>%
summarise(unique_elem = n_distinct(z1))
test2 <- function(data){
data %>% ummarise(unique_elem = n_distinct(z1))
}
test2(data = df)
data %>% summarise(unique_elem = n_distinct(z1))
test2 <- function(data){
data %>% summarise(unique_elem = n_distinct(z1))
}
test2(data = df)
test2 <- function(data){
data %>% summarise(unique_elem = n_distinct(.data[[z1]]))
}
test2(data = df)
test2 <- function(data){
data %>% summarise(unique_elem = n_distinct(.data[["z1"]]))
}
test2(data = df)
test2 <- function(data){
data %>% summarise(unique_elem = n_distinct("z1"))
}
test2(data = df)
test2 <- function(data){
data %>% summarise(unique_elem = n_distinct(.data[["z1"]]))
}
test2(data = df)
devtools::load_all()
devtools::check(manual = FALSE, vignettes = FALSE)
df
df %>% group_by("z1")
df %>% group_by(z1)
df %>% group_by(z1)
df %>% group_by(z1) %>% summarise(sum = sum(x))
test2 <- function(data){
data %>% group_by(.data[["z1"]]) %>% summarise(sum = sum(x))
}
test2(data = df)
devtools::load_all()
devtools::check()
test_fun <- function(data){
data %>%  filter(!grepl('_permuted', across(z1))) %>% print()
}
df
test_fun(data = df)
test_fun <- function(data){
data %>%  filter(!grepl('_permuted', .data[["z1"]])) %>% print()
}
df
test_fun(data = df)
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
test2 <- function(data){
data %>% group_by(.data[["z1"]]) %>% summarise(sum = sum(.data[["x"]]))
}
test2(data = df)
df %>% group_by(z1) %>% summarise(sum = sum(x))
test2 <- function(data){
data %>% group_by(.data[["z1"]]) %>% summarise(sum = median(.data[["x"]]))
}
df %>% group_by(z1) %>% summarise(sum = median(x))
test2(data = df)
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
devtools::load_all()
devtools::check()
