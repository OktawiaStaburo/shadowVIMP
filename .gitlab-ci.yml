# Below code is intended to verify the R installation within the CI/CD environment.
# stages:
#   - test
#
# test_R:
#   stage: test
#   image: rocker/tidyverse:4.4
#   script:
#     - echo "Testing R installation"
#     - R --version
#   only:
#     - main
#     - merge_requests
# stages:
#   - test
#
# test_R:
#   stage: test
#   image: rocker/tidyverse:4.4
#   script:
#     - echo "Testing R CMD Check"
#     - R --version
#
#     # Install devtools and other necessary packages
#     - R -e 'install.packages("remotes")'
#     - R -e 'remotes::install_deps(dependencies = TRUE)'
#
#     # Optionally, install suggested packages if you want a complete check
#     - R -e 'install.packages(c("AppliedPredictiveModeling", "spelling"))'
#
#     - echo "Contents of current directory:"
#     - ls -la
#     - echo "Showing DESCRIPTION found here:"
#     - cat DESCRIPTION
#
#     # Run R CMD check on the package without building the manual
#     - R CMD check ./ --no-build-vignettes --no-manual --as-cran
#
#     # Run the devtools tests
#     - R -e 'devtools::test()'
#
#     # Install the package
#     - R -e 'devtools::install()'
#
#   only:
#     - main
#     - merge_requests
stages:
  - test

# A template that runs the R package checks
.test_template: &test_template
  stage: test
  # Notice we always call R --version so you can see which R is being used.
  script:
    - echo "Testing package with R:"
    - R --version
    # Install remotes to manage dependencies (set repos explicitly for reproducibility)
    - R -e 'install.packages("remotes", repos = "https://cloud.r-project.org")'
    # Install package dependencies (including Suggests) from your DESCRIPTION file
    - R -e 'remotes::install_deps(dependencies = TRUE)'
    # Optionally install any other packages needed by examples/tests
    - R -e 'install.packages(c("AppliedPredictiveModeling", "spelling"), repos = "https://cloud.r-project.org")'
    - echo "Listing current directory contents:"
    - ls -la
    - echo "Displaying DESCRIPTION file:"
    - cat DESCRIPTION
    # Build the package tarball
    - R CMD build .
    # Run R CMD check on the built tarball; using --no-manual to speed things up
    - R CMD check *.tar.gz --no-manual --no-build-vignettes --as-cran
  only:
    - main
    - merge_requests

# A job that runs the above template on a matrix of images
test_R:
  <<: *test_template
  # Use GitLabâ€™s matrix feature to run on three different Docker images.
  parallel:
    matrix:
      - CI_IMAGE: ["rocker/tidyverse:4.4", "rocker/tidyverse:devel", "rocker/tidyverse:4.3"]
  # The image to use is set by the matrix variable
  image: $CI_IMAGE



